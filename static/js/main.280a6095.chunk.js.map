{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","registerServiceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","counter","value","this","props","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","classes","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"+RAkBeA,EAdA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEhB,OADAC,QAAQC,IAAI,qBAEX,yBAAKC,UAAU,gCACd,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,SACQ,IACP,0BAAMD,UAAU,oCACdH,MC2CSK,G,iMA/CKC,EAAWC,GAC7BN,QAAQC,IAAI,YAAaI,GACzBL,QAAQC,IAAI,YAAaK,GACrBD,EAAUE,QAAQC,MAAUC,KAAKC,MAAMH,QAAQC,Q,6CAMnDR,QAAQC,IAAI,uB,+BAGH,IAAD,OAER,OADAD,QAAQC,IAAI,sBAIX,6BACC,0BAAMC,UAAWO,KAAKE,mBACpBF,KAAKG,eAEP,4BACCC,QAAS,kBAAM,EAAKH,MAAMI,YAAY,EAAKJ,MAAMH,UACjDL,UAAU,4BAFX,aAMA,4BAAQW,QAAS,kBAAM,EAAKH,MAAMK,SAAS,EAAKL,MAAMH,QAAQS,KAAKd,UAAU,6BAA7E,a,wCASF,IAAIe,EAAU,mBAEd,OADAA,GAAwC,IAA7BR,KAAKC,MAAMH,QAAQC,MAAc,UAAY,Y,oCAI1C,IACNA,EAAUC,KAAKC,MAAMH,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAhDVU,cCqBPC,E,iLAlBbnB,QAAQC,IAAI,uBADJ,MAE6CQ,KAAKC,MAAlDU,EAFA,EAEAA,QAASC,EAFT,EAESA,SAAUN,EAFnB,EAEmBA,SAAUD,EAF7B,EAE6BA,YACrC,OACC,6BACC,4BAAQD,QAASO,EAASlB,UAAU,8BAApC,SACCmB,EAASC,KAAI,SAAAf,GAAO,OACpB,kBAAC,EAAD,CACCgB,IAAKhB,EAAQS,GACbD,SAAUA,EACVD,YAAaA,EACbP,QAASA,Y,GAZQW,aC+DRM,E,YAnDd,aAAc,IAAD,8BACZ,+CAVDC,MAAQ,CACPJ,SAAU,CACT,CAAEL,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,KAIL,EAUbkB,gBAAkB,SAAAnB,GACjB,IAAMc,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQrB,GAC/Bc,EAASM,GAAT,eAAuBpB,GACvBc,EAASM,GAAOnB,QAChB,EAAKqB,SAAS,CAAER,cAfJ,EAkBbS,YAAc,WACb,IAAMT,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAS,GAExC,OADAA,EAAEvB,MAAQ,EACHuB,KAER,EAAKF,SAAS,CACbR,cAxBW,EA4BbW,aAAe,SAAAC,GACd,IAAMZ,EAAW,EAAKI,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEf,IAAMiB,KACzD,EAAKJ,SAAS,CAAER,cA5BhBrB,QAAQC,IAAI,qBAFA,E,iFAOZD,QAAQC,IAAI,mB,+BA4BZ,OADAD,QAAQC,IAAI,kBAEX,kBAAC,IAAMkC,SAAP,KACC,kBAAC,EAAD,CAAQpC,cAAeU,KAAKgB,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEvB,MAAQ,KAAG4B,SACpE,0BAAMlC,UAAU,aACf,kBAAC,EAAD,CACCmB,SAAUZ,KAAKgB,MAAMJ,SACrBD,QAASX,KAAKqB,YACdhB,YAAaL,KAAKiB,gBAClBX,SAAUN,KAAKuB,qB,GArDHd,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.280a6095.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Stateless Functional Component\r\n\r\nconst NavBar = ({totalCounters}) => {\r\n\tconsole.log(\"NavBar - Rendered\");\r\n\treturn (\r\n\t\t<nav className=\"navbar navbar-light bg-light\">\r\n\t\t\t<a className=\"navbar-brand\" href=\"#\">\r\n\t\t\t\tNavbar{\" \"}\r\n\t\t\t\t<span className=\"badge badge-pill badge-secondary\">\r\n\t\t\t\t\t{totalCounters}\r\n\t\t\t\t</span>\r\n\t\t\t</a>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n\t// constructor() {\r\n\t// \tsuper();\r\n\t// \tthis.handleIncrement = this.handleIncrement.bind(this);\r\n\t// }\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconsole.log(\"prevProps\", prevProps);\r\n\t\tconsole.log(\"prevState\", prevState);\r\n\t\tif (prevProps.counter.value !== this.props.counter.value) {\r\n\t\t\t// aJax call to get new data from server\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tconsole.log(\"Counter - Unmount\")\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(\"Counter - Rendered\");\r\n\t\treturn (\r\n\t\t\t// React.Fragment removes the tag from the DOM when rendered\r\n\t\t\t// <React.Fragment>\r\n\t\t\t<div>\r\n\t\t\t\t<span className={this.getBadgeClasses()}>\r\n\t\t\t\t\t{this.formatCount()}\r\n\t\t\t\t</span>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => this.props.onIncrement(this.props.counter)}\r\n\t\t\t\t\tclassName=\"btn btn-secondary btn-sm\"\r\n\t\t\t\t>\r\n\t\t\t\t\tIncrement\r\n                </button>\r\n\t\t\t\t<button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">\r\n\t\t\t\t\tDelete\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t// </React.Fragment>\r\n\t\t);\r\n\t}\r\n\r\n\tgetBadgeClasses() {\r\n\t\tlet classes = \"badge m-2 badge-\";\r\n\t\tclasses += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n\t\treturn classes;\r\n\t}\r\n\r\n\tformatCount() {\r\n\t\tconst { value } = this.props.counter;\r\n\t\treturn value === 0 ? \"Zero\" : value;\r\n\t}\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n\trender() {\r\n\t\tconsole.log(\"Counters - Rendered\");\r\n\t\tconst { onReset, counters, onDelete, onIncrement } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">Reset</button>\r\n\t\t\t\t{counters.map(counter =>\r\n\t\t\t\t\t<Counter\r\n\t\t\t\t\t\tkey={counter.id}\r\n\t\t\t\t\t\tonDelete={onDelete}\r\n\t\t\t\t\t\tonIncrement={onIncrement}\r\n\t\t\t\t\t\tcounter={counter}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters';\n\nclass App extends Component {\n\tstate = {\n\t\tcounters: [\n\t\t\t{ id: 1, value: 0 },\n\t\t\t{ id: 2, value: 3 },\n\t\t\t{ id: 3, value: 0 },\n\t\t\t{ id: 4, value: 0 }\n\t\t]\n\t};\n\n\tconstructor(){\n\t\tsuper();\n\t\tconsole.log(\"App - Constructor\")\n\t}\n\n\tcomponentDidMount(){\n\t\t// aJax call\n\t\tconsole.log(\"App - Mounted\");\n\t}\n\n\thandleIncrement = counter => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tcounters[index].value++;\n\t\tthis.setState({ counters })\n\t}\n\n\thandleReset = () => {\n\t\tconst counters = this.state.counters.map(c => {\n\t\t\tc.value = 0;\n\t\t\treturn c;\n\t\t});\n\t\tthis.setState({\n\t\t\tcounters\n\t\t});\n\t}\n\n\thandleDelete = counterId => {\n\t\tconst counters = this.state.counters.filter(c => c.id != counterId);\n\t\tthis.setState({ counters });\n\t}\n\n\trender() {\n\t\tconsole.log(\"App - Rendered\")\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length}/>\n\t\t\t\t<main className=\"container\">\n\t\t\t\t\t<Counters\n\t\t\t\t\t\tcounters={this.state.counters}\n\t\t\t\t\t\tonReset={this.handleReset}\n\t\t\t\t\t\tonIncrement={this.handleIncrement}\n\t\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\t/>\n\t\t\t\t</main>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n// Have to import REACT because it is used to create react components\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}